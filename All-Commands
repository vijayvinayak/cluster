1  aws sts get-caller-identity
    2  aws eks --region eu-west-1 update-kubeconfig --name cinchy_dev
    3  kubectl get pods --kubeconfig ./.kube/config
    4  kubectl get pods 
    5  kubectl get svc
	
kubectl get deploy -n omni-app-dev
kubectl delete deploy smockin-stub 
kubectl delete deploy smockin-stub -n omni-app-dev
kubectl get deploy -n omni-app-dev
kubectl get deploy
kubectl get deploy -n omni-app-dev
kubectl get pods -n omni-app-dev
kubectl create secret docker-registry wilkoregistrycred --docker-server=registry.gitlab.com --docker-username=wilkouser --docker-password=sungBNUBP-eMaR3SfJ3X -n omni-app-stubs --dry-run=client -o yaml > wilkoregistrycred.yml
kubectl apply -f wilkoregistrycred.yml
kubectl get secrets -n omni-app-stubs
kubectl get ingress
kubectl get ingress -n omni-app-dev
kubectl delete ingress smockin-stub-ui -n omni-app-dev
kubectl get ingress -n omni-app-dev
kubectl get svc -n omni-app-dev
kubectl delete service smockin-stub -n omni-app-dev
kubectl get svc -n omni-app-dev
kubectl get deployment -n omni-app-dev

kubectl get ing -n omni-app-stubs -o yaml
kubectl get ing -n omni-app-stubs
kubectl edit ing smockin-stub-proxy -n omni-app-stubs
kubectl get ing -n omni-app-stubs
kubectl edit ing smockin-stub-proxy -n omni-app-stubs


kubectl get secret wilkoregistrycred -n omni-app-dev -o yaml \
| sed s/"namespace: omni-app-dev"/"namespace: omni-app-stubs"/\
| kubectl apply -n omni-app-stubs -f -

kubectl exec -it smockin-stub-67b8c665d4-tf7x2 -n omni-app-stubs sh

94  kubectl get ing -n omni-app-stubs -o yaml
   95  kubectl get ing -n omni-app-stubs
   96  kubectl edit ing smockin-stub-proxy -n omni-app-stubs
   97  kubectl get ing -n omni-app-stubs
   98  kubectl edit ing smockin-stub-proxy -n omni-app-stubs
 
 
 
   FROM ubuntu:bionic
USER root
RUN apt-get upgrade -y \
  && apt update && apt-get update \
    && apt-get -y install --no-install-recommends \
    curl \
    wget \
    git \
    unzip \
    postgresql-client \
    ca-certificates \
    apt-transport-https \
    && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip && chmod a+x /aws/install \
    && ./aws/install \
    && aws --version \
    && wget https://releases.hashicorp.com/terraform/1.3.4/terraform_1.3.4_linux_amd64.zip \
    && unzip terraform_1.3.4_linux_amd64.zip \
    && mv terraform /usr/local/bin/ \
    && curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.25.4/bin/linux/amd64/kubectl \
    && chmod a+x ./kubectl \
    && mv ./kubectl /usr/local/bin/kubectl \
    && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \
    && chmod +x get_helm.sh && ./get_helm.sh \
    && rm -rv /var/lib/apt/lists/* \
    && rm -rf /var/lib/apt/lists.d/* \
    && rm -rv /var/cache/apt/archives/* \
    && apt-get autoremove \
    && apt-get clean \
    && apt-get autoclean \
    && rm *.zip \
    && ls -ltr
  
# Create appuser with uid 10000
RUN adduser --disabled-password --shell /sbin/nologin --uid 10000 --home /opt/app  appuser  
RUN sed -i -r 's/^appuser:!:/appuser:x:/' /etc/shadow
#RUN id appuser

# Remove existing crontabs, if any
RUN rm -Rf /var/spool/cron /etc/crontabs /etc/periodic

# Remove unnecessary user accounts.
RUN sed -i -r '/^(appuser|root|sshd)/!d' /etc/group
RUN sed -i -r '/^(appuser|root|sshd)/!d' /etc/passwd
#RUN cat /etc/passwd
#RUN cat /etc/group

# Remove interactive login shell for all users except appuser.
RUN sed -i -r '/^appuser:/! s#^(.*):[^:]*$#\1:/sbin/nologin#' /etc/passwd

# Set sysdirs for further cleanup
ENV sysdirs="\
  /bin \
  /etc \
  /lib \
  /sbin \
  /usr \
  /usr/bin \
"

#RUN ls -a
# Ensure system dirs are owned by root and not writable by anybody else
RUN find $sysdirs -xdev -type d \
  -exec chown root:root {} \; \
  -exec chmod 0755 {} \;

# Remove all suid files.
RUN find $sysdirs -xdev -type f -a -perm /4000 -delete
# Remove some unused admin commands.
#RUN ls -a
RUN find /sbin/* ! -type f \
  -a ! -name nologin \
  -a ! -name setup-proxy \
  -a ! -name sshd \
  -a ! -name start.sh \
  -a ! -name apt \
  -exec rm -rv {} \;

RUN find /usr/sbin/* ! -type f \
  -a ! -name nologin \
  -a ! -name setup-proxy \
  -a ! -name sshd \
  -a ! -name start.sh \
  -a ! -name apt \
  -exec rm -rv {} \;  

# Remove some of the programs that is not required and could be dangerous
RUN find $sysdirs -xdev \( \
  -name hexdump -o \
  -name chgrp -o \
  -name od -o \
  -name strings -o \
  -name su -o \
  -name ping -o \
  -name netstat -o \
  -name gunzip -o \
  -name nslookup \
  \) -delete

# Remove init scripts since we do not use them.
RUN rm -Rf /etc/init.d /lib/rc /etc/conf.d /etc/inittab /etc/runlevels /etc/rc.conf

# Remove kernel tunables since we do not need them.
RUN rm -Rf /etc/sysctl* /etc/modprobe.d /etc/modules /etc/mdev.conf /etc/acpi /root /etc/fstab

# Remove broken symlinks
RUN find $sysdirs -xdev -type l -exec test ! -e {} \; -delete

# Remove unwanted Cache & Packages 
#RUN apt-get autoclean && apt-get autoremove
RUN rm -rf /var/lib/apt/lists/*
  
#
#RUN dpkg-query -Wf '${Package;-40}${Priority}\n' | sort -b -k2,2 -k1,1

# Switch to appuser
USER appuser
#RUN whoami
#RUN cat /etc/passwd

# Set working directory
WORKDIR /opt/app
RUN aws --version
RUN kubectl version --client
RUN terraform --version
RUN psql --version 
RUN helm version --short


1  kubectl get pods
    2  kubectl get pods -n default
    3  kubectl run nginx --image=nginx
    4  kubectl get pods
    5  kubectl describe pods newpods-kwjpz
    6  kubectl get pods newpods-kwjpz -o wide
    7  kubectl get pods
    8  kubectl describe pod webapp
    9  kubectl describe pod webapp
   10  kubectl delete pod webapp
   11  kubectl get pods
   12  kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml
   13  ls
   14  kubectl create -f redis-definition.yaml
   15  kubectl get pods
   16  cat sample.yaml
   17  vi sample.yaml
   18  kubectl apply -f sample.yaml
   19  ls
   20  vi redis-definition.yaml
   21  kubectl apply -f sample.yaml
   22  kubectl create -f redis-definition.yaml
   23  kubectl delete pod redis
   24  kubectl create -f redis-definition.yaml
   25  kubectl get pods
       1  kubectl get pods
    2  kubectl get replicasets
    3  kubectl get replicasets
    4  kubectl describe replicaset
    5  kubectl get pods
    6  kubectl describe pods new-replica-set-xdlqt
    7  kubectl delete  pods new-replica-set-xdlqt
    8  kubectl get pods
    9  cd /root/
   10  ls
   11  kubectl create -f replicaset-definition-1.yaml
   12  vi  replicaset-definition-1.yaml
   13  kubectl create -f replicaset-definition-1.yaml
   14  kubectl create -f replicaset-definition-2.yaml
   15  vi  replicaset-definition-2.yaml
   16  kubectl create -f replicaset-definition-2.yaml
   17  kubectl get replicasets
   18  kubectl delete replicaset-1 replicaset-2
   19  kubectl delete replicaset-1 
   20  kubectl delete replicaset-1
   21  kubectl delete replicaset  replicaset-1
   22  kubectl delete replicaset  replicaset-2
   23  ls
   24  kubectl edit replicaset new-replica-set
   25  kubectl get pods
   26  kubectl get replicasets
   27  kubectl edit replicaset new-replica-set
   28  kubectl apply replicaset new-replica-set
   29  kubectl apply -f replicaset new-replica-set
   30  ls
   31  kubectl update  replicaset new-replica-set
   32  kubectl get pods
   33  kubctl delete pods new-replica-set-wdvzh
   34  kubectl delete pods new-replica-set-wdvzh
   35  kubectl get pods
   36  kubectl delete pods new-replica-set-bg48n
   37  kubectl delete pods new-replica-set-tdmrt
   38  kubectl delete pods new-replica-set-mdcv8
   39  kubectl get pods
   40  kubectl scale rs new-replica-set --replicas=5
   41  kubectl get pods
   42  history
   
   
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      name: httpd-frontend
  template:
    metadata:
      labels:
        name: httpd-frontend
    spec:
      containers:
      - name: httpd-frontend
        image: httpd:2.4-alpine
		
    1  kubectl get pods
    2  kubectl get rs
    3  kubectl get deployments
    4  kubectl get deployments
    5  kubectl get rs
    6  kubectl get pods
    7  kubectl get pods
    8  kubectl describe pods frontend-deployment-6d8c45b946-bk65v
    9  ls
   10  kubectl create deplotment -f deployment-definition-1.yaml
   11  kubectl create deployment -f deployment-definition-1.yaml
   12  kubectl create deployment  deployment-definition-1.yaml
   13  kubectl explain deployment
   14  kubectl explain deployment | head -n1
   15  vi  deployment-definition-1.yaml
   16  kubectl create -f deployment-definition-1.yaml
   17  kubectl get deployments
   18  ls
   19  vi deployment.yaml
   20  cat deployment
   21  cat deployment.yaml
   22  kubectl create -f deployment.yaml
   23  vi deployment.yaml
   24  clear
   25  kubectl create -f deployment.yaml
   26  history		
   kubctl create deployment <name> --image=<image> --replicas=3
   kubectl rollout status deployment/myapp-deployment
   kubectl rollout history deployment/myapp-deployment
   kubectl create -f deployment-definition.yml
   kubectl get deployments
   kubectl apply -f deployment-definition.yml
   kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
   kubectl rollout status deployment/myapp-deployment
   kubectl rollout history depoyment/myapp-deployment
   kubectl rollout undo deployment/myapp-deployment
   
   
   1  apt-get update
    2  apt-get install     ca-certificates     curl     gnupg     lsb-release
    3  mkdir -p /etc/apt/keyrings
    4  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    5  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    6    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    7  apt-get update
    8  apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
    9  apt-cache madison docker-ce
   10  apt-get install docker-ce=5:20.10.17~3-0~ubuntu-jammy docker-ce-cli=5:20.10.17~3-0~ubuntu-jammy containerd.io docker-compose-plugin
   11  docker -v
   12  docker pull openjdk:8
   13  docker images
   14  docker build -it -d 2a8331246713 /bin/sh
   15  docker build -i -t -d 2a8331246713 /bin/sh
   16  docker build -d 2a8331246713 /bin/sh
   17  docker run -it -d 2a8331246713 /bin/sh
   18  docker exec -it 7027519a8fde4e9253011a296b13951ab886bd9aa375602b6ae34361465d6842 /bin/sh
   19  exit
   20  docker -v
   21  docker images
   22  docker ps
   23  docker ps -a
   24  docker rm 7027519a8fde
   25  ls -a
   26  docker ps -a
   27  docker images
   28  docker rm 2a8331246713
   29  docker login
   30  docker registry
   31  docker -h
   32  docker config
   33  docker inspect
   34  docker inspect --help
   35  docker inspect --type string
   36  docker inspect config
   37  cd /
   38  ls
   39  ls -a
   40  cd etc
   41  ls
   42  cd docker
   43  ls
   44  ls -a
   45  cat key.json
   46  cd /
   47  cd /opt
   48  ls
   49  cd /
   50  find docker
   51  find /docker
   52  find config
   53  cd /
   54  cd ~
   55  export sysdirs="\
   56    /bin \
   57    /etc \
   58    /lib \
   59    /sbin \
   60    /usr \
   61    /usr/bin \
   62  "
   63  find $sysdirs -xdev \(   -name hexdump -o   -name chgrp -o   -name od -o   -name strings -o   -name su -o   -name ping -o   -name netstat -o   -name gunzip -o   -name nslookup   \) -delete
   64  echo $sysdirs
   65  ls
   66  docker pull mcr.microsoft.com/powershell
   67  docker images
   68  docker exec -it eb3172124839
   69  docker exec -it eb3172124839  /bin/sh
   70  docker run -it eb3172124839  /bin/sh
   71  docker build  -t powershell /home/ubuntu/
   72  ls
   73  touch Dockerfile
   74  vi Dockerfile
   75  docker build  -t powershell /home/ubuntu/
   76  vi Dockerfile
   77  docker build  -t powershell /home/ubuntu/
   78  vi Dockerfile
   79  docker build  -t powershell /home/ubuntu/
   80  vi Dockerfile
   81  pwd
   82  docker build  -t powershell /root
   83  docker images
   84  docker ps
   85  vi Dockerfile
   86  docker build  -t powershell /root
   87  vi Dockerfile
   88  docker build  -t powershell /root
   89  vi Dockerfile
   90  docker build  -t powershell /root
   91  ls
   92  vi Dockerfile
   93  rm Dockerfile
   94  ls
   95  touch Dockerfile
   96  ls
   97  vi Dockerfile
   98  cat Dockerfile
   99  history
  100  docker build -t prudhvi /root
  101  docker images
  102  docker ps
  103  docker rm a253390dfa5d
  104  docker rm -f a253390dfa5d
  105  ls
  106  docker ps -a
  107  docker rm -f 3e6c1aacf6e1~
  108  docker rm -f 3e6c1aacf6e1
  109  docker rm -f b959cb816c7a
  110  docker ps -aa
  111  docker ps -a
  112  docker images -a
  113  docker images
  114  docker rm -f mcr.microsoft.com/powershell
  115  docker rm  mcr.microsoft.com/powershell
  116  docker rmi  mcr.microsoft.com/powershell
  117  docker rmi  ubuntu
  118  docker rmi  openjdk
  119  docker images
  120  docker build -h
  121  docker rmi prudhvi
  122  docker images
  123  docker rmi -f 2a8331246713
  124  docker images -a
  125  docker build -h
  126  ls
  127  docker build --compress -t prudhvi /root
  128  docker images
  129  docker run prudhvi
  130  docker run -it  prudhvi
  131  docker images
  132  docker run -it  prudhvi
  133  vi Dockerfile
  134  docker build --compress -t prudhvi2 /root
  135  docker run -it  prudhvi2
  136  docker ps
  137  docker ps -a
  138  docker rm -f dfe9a77c5da5
  139  docker rm -f 7d1b16ec2feb
  140  docker rm -f ff9ccbd5bf99
  141  docker rm -f e1b977ca09d0
  142  ls
  143  docker build -t prudhvi2 /root
  144  docker run -it  prudhvi2 
  145  docker ps
  146  docker ps -a
  147  docker images
  148  docker pull mcr.microsoft.com/powershell
  149  docker images
  150  docker images
  151  docker ps
  152  docker ps -a
  153  docker exec -it 7438f8581a88 /bin/sh
  154  docker run -it 7438f8581a88
  155  docker run -it 4bcdf53ee67b
  156  docker run -it  prudhvi2
  157  ls
  158  docker ps
  159  docker ps -a
  160  docker rm 047cf804de8c
  161  docker rm -f bffa37dd3c07
  162  docker rm -f a298fd990b8e
  163  docker rm -f 7438f8581a88
  164  docker rm -f c9fc9b436d1d
  165  docker rm -f 04a4455798b3
  166  ls
  167  docker ps
  168  docker ps -a
  169  docker images
  170  docker run -it 4bcdf53ee67b
  171  docker run -it prudhvi2
  172  docker images
  173  docker run -it prudhvi2
  174  docker images
  175  docker run -it prudhvi2
  176  cd /etc
  177  ls
  178  cat passwd
  179  docker run -it prudhvi2
  180  cd /
  181  ls
  182  cd ~
  183  ls
  184  vi dockerfile
  185  pwd
  186  vi dockerfile
  187  docker build -t prudhvi3 /root
  188  docker images
  189  docker run -it prudhvi3
  190  docker images
  191  docker rmi prudhvi3
  192  docker images
  193  docker build --no-cache -t prudhvi3
  194  docker build --no-cache -t prudhvi3 /root
  195  docker images
  196  ls
  197  rm dockerfile
  198  docker rmi prudhvi3
  199  vi Docker
  200  ls
  201  vi Dockerfile
  202  docker build --no-cache -t prudhvi3 /root
  203  docker images
  204  docker run -it prudhvi3
  205  ls
  206  sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
  207  wget -O- https://apt.releases.hashicorp.com/gpg |     gpg --dearmor |     sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
  208  gpg --no-default-keyring     --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg     --fingerprint
  209  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
  210      https://apt.releases.hashicorp.com $(lsb_release -cs) main" |     sudo tee /etc/apt/sources.list.d/hashicorp.list
  211  sudo apt update
  212  sudo apt-get install terraform
  213  terraform --help
  214  git
  215  git clone https://github.com/innovationnorway/terraform-azurerm-service-bus.git
  216  ls
  217  cd terraform-azurerm-service-bus
  218  ls
  219  terraform init
  220  ls
  221  cd terraform-azurerm-service-bus
  222  terraform init
  223  terraform validate
  224  terraform plan
  225  docker ikmkages
  226  docker images
